1) For openssl repository from the following github location:

https://github.com/openssl/openssl

I forked into GitHub from this location

2) How to build openssl

LINKS:
http://wiki.openssl.org/index.php/Compilation_and_Installation
http://wiki.openssl.org/index.php/Android

- The version installed on ubuntu 12.04 is:

$ openssl version -a
OpenSSL 1.0.1 14 Mar 2012
built on: Thu Jun 11 15:26:20 UTC 2015
platform: debian-amd64
options:  bn(64,64) rc4(16x,int) des(idx,cisc,16,int) blowfish(idx) 
compiler: cc -fPIC -DOPENSSL_PIC -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -m64 -DL_ENDIAN -DTERMIO -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Wformat-security -Werror=format-security -D_FORTIFY_SOURCE=2 -Wl,-Bsymbolic-functions -Wl,-z,relro -Wa,--noexecstack -Wall -DOPENSSL_NO_TLS1_2_CLIENT -DMD32_REG_T=int -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM
OPENSSLDIR: "/usr/lib/ssl"

I created a branch do_ubuntu_12_04 from OpenSSL_1_0_1 tag which is the version of the openssl in Ubuntu 12.04

- Build process

$ ./config 
$ make
$ make test

NOTE: To to delete a configuration and start anew, run make dclean. 

$ make clean
$ make dclean
$ ./config shared no-idea
$ make
$ make test

NOTE: shared option is to build shared libraries and no-idea is required to prevent the following failure:

$ apps/openssl version -a
OpenSSL 1.0.1 14 Mar 2012
built on: Thu Jun 11 15:26:20 UTC 2015
platform: debian-amd64
apps/openssl: symbol lookup error: apps/openssl: undefined symbol: idea_options


3) Package that installs openssl headers is libssl-dev

- libssl-dev
SSL development libraries, header files and documentation

apt-get install libss-dev

- installed files
/.
/usr
/usr/include
/usr/include/openssl
/usr/include/openssl/aes.h
/usr/include/openssl/asn1.h
/usr/include/openssl/asn1_mac.h
/usr/include/openssl/asn1t.h
/usr/include/openssl/bio.h
/usr/include/openssl/blowfish.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/camellia.h
/usr/include/openssl/cast.h
/usr/include/openssl/cmac.h
/usr/include/openssl/cms.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/conf_api.h
/usr/include/openssl/crypto.h
/usr/include/openssl/des.h
/usr/include/openssl/des_old.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dso.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/hmac.h
/usr/include/openssl/krb5_asn.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/md4.h
/usr/include/openssl/md5.h
/usr/include/openssl/modes.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objects.h
/usr/include/openssl/ocsp.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs12.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rand.h
/usr/include/openssl/rc2.h
/usr/include/openssl/rc4.h
/usr/include/openssl/ripemd.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/seed.h
/usr/include/openssl/sha.h
/usr/include/openssl/srp.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/ts.h
/usr/include/openssl/txt_db.h
/usr/include/openssl/ui.h
/usr/include/openssl/ui_compat.h
/usr/include/openssl/whrlpool.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509v3.h
/usr/lib
/usr/lib/x86_64-linux-gnu
/usr/lib/x86_64-linux-gnu/libcrypto.a
/usr/lib/x86_64-linux-gnu/libcrypto.so
/usr/lib/x86_64-linux-gnu/libssl.a
/usr/lib/x86_64-linux-gnu/libssl.so
/usr/lib/x86_64-linux-gnu/pkgconfig
/usr/lib/x86_64-linux-gnu/pkgconfig/libcrypto.pc
/usr/lib/x86_64-linux-gnu/pkgconfig/libssl.pc
/usr/lib/x86_64-linux-gnu/pkgconfig/openssl.pc
/usr/share
/usr/share/doc
/usr/share/doc/libssl-dev
/usr/share/doc/libssl-dev/changelog.Debian.gz
/usr/share/doc/libssl-dev/changelog.gz
/usr/share/doc/libssl-dev/copyright

4) Documentation:

LINKS:
https://www.openssl.org/docs/
http://wiki.openssl.org/index.php/Main_Page

- openssl is a command line tool
man openssl

LINKS:
https://www.openssl.org/docs/apps/openssl.html
https://www.madboa.com/geek/openssl/
http://users.dcc.uchile.cl/~pcamacho/tutorial/crypto/openssl/openssl_intro.html

- crypto library and symetric cyphers

LINKS:
https://www.openssl.org/docs/apps/enc.html
https://www.openssl.org/docs/crypto/crypto.html
https://www.openssl.org/docs/crypto/

man enc

- all APIs

LINKS:
https://wiki.openssl.org/index.php/Documentation_Index

5) Some examples:

LINKS:
http://wiki.openssl.org/index.php/Diffie-Hellman_parameters
http://wiki.openssl.org/index.php/Libcrypto_API
http://wiki.openssl.org/index.php/Category:Examples
http://www.ajanicij.info/content/openssl-sample-code-using-bio
https://software.intel.com/en-us/articles/how-to-use-the-rdrand-engine-in-openssl-for-random-number-generation
http://jbp.io/2014/01/16/openssl-rand-api/

6) How to build an example

- openssl command line tool is in the following location:

/home/dostojic/openssl/apps/openssl

- Getting started
LINKS:
http://wiki.openssl.org/index.php/Libcrypto_API

- Makefile

CC=cc
CFLAGS= -g -Wall -std=c99
LIBS=  -lcrypto
LIBS+=  -lcrypto
EXAMPLES=random_engine

all: $(EXAMPLES) 

random_engine: random_engine.o
	$(CC) -o random_engine random_engine.o $(LIBS)

clean:	
	rm -f $(EXAMPLES) *.o

test: all
	@echo Test running random_engine
	./random_bytes
	
7) How to probe Intel CPU for rdrand instruction:

$ cat /proc/cpuinfo | grep -i rdrand
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms

8) FIPS requirements

US export rules require that cryptographic modules confirm to the document:

http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf

- FIPS mode is a special mode of operation which specifies the library should operate according to the security policies and procedures.
The mode requires use of the FIPS Capable OpenSSL library, and must be enabled with a call to FIPS_mode_set. 
Once in FIPS mode, a default DRBG is used as specified in SP800-90. 

Check these links:

http://wiki.openssl.org/index.php/Random_Numbers
https://wiki.openssl.org/index.php/Compilation_and_Installation#FIPS_Capable_Library

9) Encrypt and decrypt using command line tool:

LINKS:
https://www.madboa.com/geek/openssl/

- Encrypt file.txt to file.enc using 256-bit AES in CBC mode
openssl enc -e -aes-256-cbc -salt -in file.txt -out file.enc

- Decrypt binary file.enc
openssl enc -d -aes-256-cbc -in file.enc

NOTES: 
- To provide the password on the command line use  -pass pass:mySillyPassword and to
provide it in the file use -pass file:/path/to/secret/password.txt

- Use the -base64 option to get human readable output

- To use Intel crypto engine:

$ openssl engine
(rsax) RSAX engine support
(rdrand) Intel RDRAND engine
(dynamic) Dynamic engine loading support

$ echo "Hello world" | openssl enc -base64 -engine rdrand -e -aes-256-cbc -salt -k mypassword
engine "rdrand" set.
U2FsdGVkX1/tAB2rkJ6ScEYQtb88knJ8MQL+RUNJLu0=

$ echo "U2FsdGVkX19B52jJk7K59N9l51VHaGlbHjXsiEAFvPE=" | openssl enc -base64 -engine rdrand -d -aes-256-cbc -salt -k mypassword
engine "rdrand" set.
Hello world

NOTE:
echo will silently attach a newline character to your string. Consider using its -n option 
if you want to avoid that situation, which could be important if youâ€™re trying to encode a password 
or authentication string.

$ echo -n "Hello world" | openssl enc -base64 -engine rdrand -e -aes-256-cbc -salt -k mypassword
engine "rdrand" set.
U2FsdGVkX19htmB4KOwKrppo0DeGmvriqV7StjmJumo=


$ echo "U2FsdGVkX19htmB4KOwKrppo0DeGmvriqV7StjmJumo=" | openssl enc -base64 -engine rdrand -d -aes-256-cbc -salt -k mypassword
engine "rdrand" set.
Hello world

NOTE:
Interesting thing is that every time we encrypt the same plane text with the same password we get a totally different
cyphertext. This is called many-time pad i.e. we can use the same key many times until it (so to speak) expires (i.e becomes
non-secure). There is a formula for that. 

$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -salt -k mypassword
U2FsdGVkX1+25SPXJ0I6yb7UDriqLlZ7BOH6XaaOIv8=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -salt -k mypassword
U2FsdGVkX1/D4LKrHMns8diH/xy4n1jaqGcgxJ2zTa0=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -salt -k mypassword
U2FsdGVkX19ACCl7hzDqsaf8yTeYHvXdik2CqlU1HlI=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -salt -k mypassword
U2FsdGVkX1/RRiXD2VDQgKKV3G1Dr/GTsfpLEG2uHas=

NOTE:
The encrypted text always starts with the same pattern U2FsdGVkX1 and ends with =.

Why is this?

Check this out:
http://crypto.stackexchange.com/questions/15110/cryptojs-aes-result-always-has-same-first-few-bytes

This same text is when base64 decoded:

Salted__

This is a prefix added to the cypertext to define its format.


To get the same output we can use the same salt option -S or -nosalt:

$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -S abc -k mypassword
U2FsdGVkX1+rwAAAAAAAAKUJcj5xdSOpb9vdA3OU0MI=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -S abc -k mypassword
U2FsdGVkX1+rwAAAAAAAAKUJcj5xdSOpb9vdA3OU0MI=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -S abc -k mypassword
U2FsdGVkX1+rwAAAAAAAAKUJcj5xdSOpb9vdA3OU0MI=
$ echo -n "Hello world" | openssl enc -base64 -e -aes-256-cbc -S abc -k mypassword
U2FsdGVkX1+rwAAAAAAAAKUJcj5xdSOpb9vdA3OU0MI=

- The -p option will give more details:

$ echo -n "Hello world" | openssl enc -base64 -e -salt -aes-256-cbc -k mypassword -p
salt=529554771523DDD7
key=5233A4858606A7759ED3BA4BC3DBC13B25F7CF322AC281F7676ABC55A733CC3A
iv =3AAD41058B6DAF5E8C17CE04E6F4B6B9
U2FsdGVkX19SlVR3FSPd15B9FoIDK4iTnwukbMDGsc0=


- Generate password hash will salt will generate always the same hash
$ openssl passwd -salt 8E MySecret
8E4vqBR4UOYF.
$ openssl passwd -salt 8E MySecret
8E4vqBR4UOYF.


- Generate password hash without salt will generate a different hash every time
openssl passwd MySecret

$ openssl passwd MySecret
8SIDmC50PkWmE
$ openssl passwd MySecret
kVOC/Fo5VwGMM

- Longer hash (MD5-based)
$ openssl passwd -1 MySecret
$ openssl passwd -1 -salt sXiKzkus MySecret

- Some AES methods:
aes-[128|192|256]-cbc  128/192/256 bit AES in CBC mode
aes-[128|192|256]      Alias for aes-[128|192|256]-cbc
aes-[128|192|256]-cfb  128/192/256 bit AES in 128 bit CFB mode
aes-[128|192|256]-cfb1 128/192/256 bit AES in 1 bit CFB mode
aes-[128|192|256]-cfb8 128/192/256 bit AES in 8 bit CFB mode
aes-[128|192|256]-ecb  128/192/256 bit AES in ECB mode
aes-[128|192|256]-ofb  128/192/256 bit AES in OFB mode

- Supported engines
$ openssl engine
(rsax) RSAX engine support
(rdrand) Intel RDRAND engine
(dynamic) Dynamic engine loading support

10) Digest methods:
-md4            to use the md4 message digest algorithm
-md5            to use the md5 message digest algorithm
-ripemd160      to use the ripemd160 message digest algorithm
-sha            to use the sha message digest algorithm
-sha1           to use the sha1 message digest algorithm
-sha224         to use the sha224 message digest algorithm
-sha256         to use the sha256 message digest algorithm
-sha384         to use the sha384 message digest algorithm
-sha512         to use the sha512 message digest algorithm
-whirlpool      to use the whirlpool message digest algorithm




